#!/bin/bash

set -e

# Check input parameters

function usage {
    echo 1>&2
    echo 1>&2 "usage: $(basename $0)  [-despawn] [-bakres mode] [-command commandline]"
    echo 1>&2
    echo 1>&2 '    [OPTION]                     [DESCRIPTION]'
    echo 1>&2
    echo 1>&2 '    [-despawn]                   auto-run despawn-batch (default false)'
    echo 1>&2 '    [-bakres   mode]             mode of backup result, mode = none|cp|mv (default none)'
    echo 1>&2 '                                 copy/move input & output files to newly created backup directory '
    echo 1>&2
    echo 1>&2 '    [-command  commandline]      command line for running application'
    echo 1>&2 '                                 this option should be located at the end of command line'
    echo 1>&2
    exit 1
}

if [ $# -lt 1 ]; then
    usage
fi


# Set defaults

despawn='false'
bakres='none'
genjob='false'
cmdline=''
mpinp=1
seed=''
max=1000000    # default $opt_max  in airss.pl
exe='castep'   # default $opt_exec in airss.pl
numpot='256'   # default 


# Parse arguments

while [ $# -ge 1 ] ; do
    case $1 in
        -despawn)
            despawn='true'; shift 1
            ;;
        -genjob)
            genjob='true'; shift 1
            ;;
        -bakres)
            bakres=$2; shift 2
            ;;
        -command)
            shift 1; cmdline=$*;

            # for a quoted command line (required for passing redirection, e.g., franks, flock)

            [[ $# -eq 1 ]] && cmdline_quoted='true' || cmdline_quoted='false'

            # parse arguments from the command line

            if [[ ${cmdline_quoted} == 'true' ]]
            then
                program=$(echo $cmdline | awk '{print $1}' | awk 'BEGIN {FS="/"} {print $NF}' | awk 'BEGIN { FS = "." }; {print $1}')
                [[ $(echo $cmdline | grep flock | wc -l) -eq 1 ]] && program='flock'
                mpinp=$(echo $cmdline | sed -n 's/.*-mpinp[[:space:]]\+\([0-9]\+\).*/\1/p') # airss | crud
                [[ -z $mpinp ]] && mpinp=1
                ompnp=$(echo $cmdline | sed -n 's/.*-ompnp[[:space:]]\+\([0-9]\+\).*/\1/p') # forge | flock
                [[ -z $ompnp ]] && ompnp=1
                if [[ $(echo $cmdline | sed -n '/-repose/p' | wc -l) -eq 1 ]]; then
                    exe='repose' # airss | crud
                fi
                shift 1
            elif [[ ${cmdline_quoted} == 'false' ]]
            then
                program=$(echo $1 | awk 'BEGIN {FS="/"} {print $NF}' | awk 'BEGIN { FS = "." }; {print $1}'); shift 1
                while [ $# -ge 1 ]; do
                    case $1 in
                        -mpinp)
                            mpinp=$2; ompnp=1; shift 2 # airss | crud
                            ;;
                        -ompnp)
                            ompnp=$2; mpinp=1; shift 2 # forge
                            ;;
                        -repose)
                            exe='repose'; shift 1 # airss | crud
                            ;;
                        -seed)
                            seed=$2; shift 2 # airss
                            ;;
                        -max)
                            max=$2; shift 2 # airss
                            ;;
                        -numpot)
                            numpot=$2; shift 2 # forge
                            ;;
                        -s)
                            seed=$(echo $2 | awk 'BEGIN {FS="/"} {print $NF}'); shift 2 # forge
                            ;;
                        *)
                            shift 1
                            ;;
                    esac
                done
            fi
            ;;
        -h)
            usage
            ;;
	*) 
            echo "invalid option: $1"
            echo
            usage
            ;;
    esac
done

jobscript="jobscript_${program}.sh"



# Check before proceeding

if ls .spawnpids* &>/dev/null; then
    echo 'Spawn files detected - aborting ...'
    exit 127
fi

if [[ -f STOP ]]; then
    echo 'STOP file detected - aborting ...'
    exit 127
fi

if [[ $(ls *.schedopt | wc -l) -ne 1 ]]; then
    echo "There should be one *.schedopt file"
    exit 127
fi



# Read *.schedopt file and get options for scheduler

optfile=$(ls *.schedopt)
schedopt=$(cat $optfile  | sed "/^%block ${program}/,/^%endblock ${program}/!d;//d")
[ -z "$schedopt" ] &&  schedopt=$(cat $optfile  | sed '/^%block default/,/^%endblock default/!d;//d')

nonschedopt=$(echo "$schedopt" | sed '/^#/d')
schedopt=$(echo "$schedopt" | sed -n '/^#/p')


# Specify the scheduler type

nopts_sge=$(echo "$schedopt" | sed -n '/^#\$/p' | wc -l)
nopts_slurm=$(echo "$schedopt" | sed -n '/^#SBATCH/p' | wc -l)
if [[ $nopts_sge -gt 0 ]]; then
    sched='sge'
    schedopt=$(echo "$schedopt" | sed -n '/^#\$/p')
elif [[ $nopts_slurm -gt 0 ]]; then
    sched='slurm'
    schedopt=$(echo "$schedopt" | sed -n '/^#SBATCH/p')
else
    echo "sge | slurm is only available"
    exit 127
fi



# Specify the amount of computational resources to request

if [[ $sched == "sge" ]]
then
    # number of cores & nodes (requested) per each job

    sched_ncores_per_job=$(echo "$schedopt" | sed -n '/ -pe /p' | awk '{print $4}')
    sched_ncores_per_node=$(echo "$nonschedopt" | grep 'ncores_per_node' | awk 'BEGIN {FS="="} {print $2}' | awk '{print $1}')
    sched_nnodes_per_job=$(echo "$sched_ncores_per_job/$sched_ncores_per_node" | bc)

    # number of jobs (requested)

    sched_njobs_per_array=$(echo "$schedopt" | sed -n '/ -t /p' | awk '{print $3}' | awk 'BEGIN {FS="-"} {print $2}')
    sched_nnodes_per_array=$(echo "$sched_nnodes_per_job * $sched_njobs_per_array" | bc)
    sched_ncores_per_array=$(echo "$sched_ncores_per_job * $sched_njobs_per_array" | bc)

elif [[ $sched == "slurm" ]]
then
    # number of cores & nodes (requested) per each job

    sched_ncores_per_node=$(echo "$schedopt" | sed -n '/--tasks-per-node/p' | awk 'BEGIN {FS="--tasks-per-node="} {print $2}')
    sched_nnodes_per_job=$(echo "$schedopt" | sed -n '/--nodes/p' | awk 'BEGIN {FS="--nodes="} {print $2}')
    sched_ncores_per_job=$(echo "$sched_ncores_per_node*$sched_nnodes_per_job" | bc)

    # number of jobs (requested)

    sched_njobs_per_array=$(echo "$schedopt" | sed -n '/--array/p' | awk 'BEGIN {FS="--array="} {print $2}' | awk 'BEGIN {FS="-"} {print $2}')
    sched_nnodes_per_array=$(echo "$sched_nnodes_per_job * $sched_njobs_per_array" | bc)
    sched_ncores_per_array=$(echo "$sched_ncores_per_job * $sched_njobs_per_array" | bc)
fi



# Specify the size of subjobs

nnodes_per_subjob=$(echo "$nonschedopt" | grep 'nnodes_per_subjob' | awk 'BEGIN {FS="="} {print $2}' | awk '{print $1}')
[[ -z $nnodes_per_subjob ]] && nnodes_per_subjob=1
ncores_per_subjob=$(echo "$nonschedopt" | grep 'ncores_per_subjob' | awk 'BEGIN {FS="="} {print $2}' | awk '{print $1}')
[[ -z $ncores_per_subjob ]] && ncores_per_subjob=$sched_ncores_per_node
ncores_per_subjob_per_node=$(( ($ncores_per_subjob + $nnodes_per_subjob - 1) / $nnodes_per_subjob ))
mpinp_per_node=$(( ($mpinp + $nnodes_per_subjob - 1) / $nnodes_per_subjob )) # for underpopulation

mem_per_core=$(echo "$nonschedopt" | grep 'mem_per_core' | awk 'BEGIN {FS="="} {print $2}' | awk '{print $1}')
mem_per_subjob=$(( $mem_per_core * $ncores_per_subjob_per_node ))



# Specify how to distribute subjobs

if [[ $nnodes_per_subjob -eq 1 ]]; then

    # single-node calculation

    nsubjobs_per_node=$(echo "$sched_ncores_per_node / $ncores_per_subjob" | bc)
    nsubjobs_per_job=$(echo "$sched_nnodes_per_job * $nsubjobs_per_node" | bc)

elif [[ $nnodes_per_subjob -gt 1 ]]; then

    # multi-node calculation

    nsubjobs_per_node="1"
    nsubjobs_per_job=$(echo "$sched_nnodes_per_job / $nnodes_per_subjob" | bc)
fi
nsubjobs_per_array=$(echo "$sched_njobs_per_array * $nsubjobs_per_job" | bc)



# Check before proceeding

if [[ $nnodes_per_subjob -gt $sched_nnodes_per_job ]]; then
    echo "Warning: number of nodes for a subjob should be equal or less than number of nodes requested for a job"
    echo "number of nodes (/job)    : $sched_nnodes_per_job"
    echo "number of nodes (/subjob) : $nnodes_per_subjob"
    exit 127
fi

if [[ $ncores_per_subjob_per_node -gt $sched_ncores_per_node ]]; then
    echo "Warning: number of cores per node for a subjob should be equal or less than the number of cores per node"
    echo "number of nodes (/node)        : $sched_ncores_per_node"
    echo "number of nodes (/subjob/node) : $ncores_per_subjob_per_node"
    exit 127
fi

if [[ $mpinp_per_node -gt $ncores_per_subjob_per_node ]]; then
    echo "Warning: mpinp per node should be equal or less than the number of cores per node for a subjob"
    echo "mpinp (/subjob/node)           : $mpinp_per_node"
    echo "number of cores (/subjob/node) : $ncores_per_subjob_per_node"
    exit 127
fi




echo
echo
echo '    .dP"Y8 88""Yb    db    Yb        dP 88b 88          88""Yb    db    888888  dP""b8 88  88'
echo '    `Ybo." 88__dP   dPYb    Yb  db  dP  88Yb88 ________ 88__dP   dPYb     88   dP   `" 88  88'
echo '    o.`Y8b 88"""   dP__Yb    YbdPYbdP   88 Y88 """""""" 88""Yb  dP__Yb    88   Yb      888888'
echo "    8bodP' 88     dP''''Yb    YP  YP    88  Y8          88oodP dP''''Yb   88    YboodP 88  88"
echo 
echo
echo '    Automated generation of jobscript & automated job submission'
echo '    for batch queuing system'
echo
echo '    Summary of parameters - '
echo
echo "      command       : $cmdline"
echo "      program       : $program"
echo "      seed          : $seed"
echo "      despawn       : $despawn"
echo "      bakres        : $bakres"
[[ $program == "airss" ]] && echo "      max           : $max"
[[ $program == "forge" ]] && echo "      numpot        : $numpot"
echo
echo "      * Information on HPC hardware and scheduler"
echo "      jobscript     : $jobscript"
echo "      scheduler     : $sched"
echo "      cores         : $sched_ncores_per_node /node"
echo
echo "      * The amount of computational resources to request"
echo "      cores         : $sched_ncores_per_job /job"
echo "      nodes         : $sched_nnodes_per_job /job"
echo "      jobs          : $sched_njobs_per_array /array"
echo "      cores         : $sched_ncores_per_array /array"
echo "      nodes         : $sched_nnodes_per_array /array"
echo
echo "      * The size of each subjob"
echo "      nodes         : $nnodes_per_subjob /subjob"
echo "      cores         : $ncores_per_subjob /subjob"
echo "                    : $ncores_per_subjob_per_node /subjob/node"
echo "      mpinp         : $mpinp /subjob"
echo "                    : $mpinp_per_node /subjob/node"
echo "      ompnp         : $ompnp /subjob"
echo "      memory        : ${mem_per_core}M/core"
echo 
echo "      * The distirbution of subjobs"
echo "      subjobs       : $nsubjobs_per_node /node"
echo "                    : $nsubjobs_per_job /job"
echo "                    : $nsubjobs_per_array /array"
if [[ $mpinp -lt $ncores_per_subjob ]]; then
echo "      underpopulate : $mpinp_per_node /node out of $ncores_per_subjob_per_node /node" 
echo
echo
fi


## Generate batch script to run an MPI parallel array job under Sun Grid Engine (SGE) batch queuing system

function genjob {
    
    echo '    generate jobscript ...'
    
    # job script - scheduler options

    (
        echo "#!/bin/bash -l"
        echo
        echo "${schedopt}"
        echo
    ) > $jobscript

    # job script - environment variables & variables
    # at runtime, archer2 jobs do not have access to the home directory, but we require the .bashrc
    # copy it into the run directory
    cp ~/.bashrc ./
    (
        echo '# --------------------------------------------------'
        echo
        echo 'source ./.bashrc'
        echo 
        echo '# set variables'
        echo 
        if [[ $sched == "sge" ]]
        then
            echo 'workdir="${SGE_O_WORKDIR}"'
            echo 'jobid="${JOB_ID}"'
            echo 'taskid="${SGE_TASK_ID}"'
        elif [[ $sched == "slurm" ]]
        then
            echo 'workdir="${SLURM_SUBMIT_DIR}"'
            echo 'jobid="${SLURM_ARRAY_JOB_ID}"'
            echo 'taskid="${SLURM_ARRAY_TASK_ID}"'
        fi
        echo 'jids="${jobid}.${taskid}"'
        echo 'prefix=".spawnpids"'
        echo
        echo "mpinp='${mpinp}'"
        echo "export OMP_NUM_THREADS=${ompnp}"
        
        if [[ $program == "airss" ]] || [[ $program = "forge" ]]; then
            echo "seed='${seed}'"
        fi
        echo
    ) >> $jobscript

    # job script - run application

    (
        echo '# launch program'
        echo

        if [[ $sched == 'slurm' ]]
        then
            echo 'nodelist=$(scontrol show hostnames $SLURM_JOB_NODELIST)'
		    echo 'templist=($nodelist)'

            echo "for (( ni=0; ni<${sched_nnodes_per_job}; ni+=${nnodes_per_subjob} ))"
            echo 'do'
		    echo '    nodeid=""'
		    echo '    tempid=""'
		    echo '    for nj in `seq 1' ${nnodes_per_subjob}'`'
            echo '    do'
		    echo '        index=$(( ni + nj - 1 ))'
		    echo '        tempid+="${templist[index]},"'
            echo '    done'
		    echo '    nodeid=${tempid%,*}'
            echo
            echo "    for (( i=1; i<=${nsubjobs_per_node}; i++ ))"
            echo '    do'

        elif [[ $sched == 'sge' ]]
        then
            echo "for (( ni=0; ni<${sched_nnodes_per_job}; ni+=${nnodes_per_subjob} ))"
            echo 'do'
            echo '    nodeid=""'
            echo '    nodeid=$(( ni + 1 ))'
            echo "    for (( i=1; i<=${nsubjobs_per_node}; i++ ))"
            echo '    do'
        fi


        # command lines for application

        if [[ $program == 'airss' || $program == 'crud' ]]
        then
            # airss & crud
            if [[ $exe == 'castep' ]] && [[ $sched == 'sge'   ]]; then
                echo "        ${cmdline}"'\'
                echo "            -launch 'mpirun -np '"' \'
                echo "            -exec 'castep.mpi' &"
            elif [[ $exe == 'castep' ]] && [[ $sched == 'slurm' ]]; then
                echo "        ${cmdline}"' \'
                echo '            -launch "srun --nodelist=${nodeid} --exact --nodes='"${nnodes_per_subjob}"' --cpus-per-task=1 --mem='"${mem_per_subjob}"'M  --ntasks-per-node='"${mpinp_per_node}"'  --ntasks=" \'
                echo "            -exec 'castep.mpi' &"
            elif [[ $exe == 'repose' ]]; then
                echo "        ${cmdline} &"
            fi
        elif [[ $program == 'forge' ]]
        then
            # forge
            echo "        ${cmdline}"'.${jids}.${nodeid}.${i}  < /dev/null \'
            echo '                                 > ${seed}/${seed}.${jids}.${nodeid}.${i}.out \'
            echo '                                2> ${seed}/${seed}.${jids}.${nodeid}.${i}.err &'
        elif [[ $program == 'franks' ]] || [[ $program == 'flock' ]]
        then
            # franks & flock
            echo "        ${cmdline}"
        else
            echo "        ${cmdline} < /dev/null >& /dev/null &"
        fi

        echo ''
        echo '        pid=$!'
        echo '        pgid=`ps -o pgid= ${pid}`'
        echo '        echo "--------------------${jids}.${nodeid}.${i}"      >> ${prefix}.${jids}'
        echo '        echo "nodeid:             ${nodeid}"                   >> ${prefix}.${jids}'
        echo '        echo "pid:                ${pid}"                      >> ${prefix}.${jids}'
        echo '        echo "pgid:               ${pgid}"                     >> ${prefix}.${jids}'
        echo '        echo "start_time:         $(date +%Y-%m-%d\ %H:%M:%S)" >> ${prefix}.${jids}'
        echo '    done'
        echo 'done'
        echo
        echo 'sleep 5'
        echo
    ) >> $jobscript

    # job script - monitor jobs
    
    if [[ $program == "airss" ]]
    then
        (
            echo "# check the number of random structure generated (./*.res files)"
            echo
            echo 'tsec_start=$(date +%s)'
            echo 
            echo 'counter=0'
            echo "max='${max}'"
            echo 
            echo 'until [[ $counter -ge $max ]]'
            echo 'do'
            echo '    sleep 1'
            echo 
            echo '    counter=$(find . -maxdepth 1 -type f -name "$seed-*.res" 2> /dev/null | sed "/data.res/d" | xargs grep --no-filename TITL 2> /dev/null | wc -l)'
            echo 
            echo '    t_check=$(date +%Y-%m-%d\ %H:%M:%S)'
            echo '    tsec_check=$(date +%s)'
            echo '    tsec_run=$((${tsec_check} - ${tsec_start}))'
            echo '    rt_h=$(( ${tsec_run}/3600 ))'
            echo '    rt_m=$(( (${tsec_run}/60) - (${rt_h}*60) ))'
            echo '    rt_s=$(( ${tsec_run} - (${tsec_run}/60)*60 ))'
            echo 
            echo '    sed -i "/check_time/d"                                    ${prefix}.${jids}'
            echo '    sed -i "/run_time/d"                                      ${prefix}.${jids}'
            echo '    sed -i "/no. structures/d"                                ${prefix}.${jids}'
            echo '    echo "check_time:         ${t_check}"                  >> ${prefix}.${jids}'
            echo '    echo "run_time:           ${rt_h}:${rt_m}:${rt_s}"     >> ${prefix}.${jids}'
            echo '    echo "no. structures:     ${counter}"                  >> ${prefix}.${jids}'
            echo 'done'
            echo 
            echo 'sleep 5'
            echo
            echo 'touch DONE_${jobid}' >> $jobscript
        ) >> $jobscript
    elif [[ $program == "crud" ]]
    then
        (
            echo '# check the number of random structure left (./hobber/*.res files)'
            echo
            echo 'tsec_start=$(date +%s)'
            echo 
            echo 'counter=1'
            echo
            echo "until [[ \${counter} -lt ${nsubjobs_per_array} ]]"
            echo 'do'
            echo '    sleep 1'
            echo 
            echo '    counter=$(find . ./hopper -maxdepth 1 -type f -name "*.res" | sed "/data.res/d" | wc -l)'
            echo
            echo '    t_check=$(date +%Y-%m-%d\ %H:%M:%S)'
            echo '    tsec_check=$(date +%s)'
            echo '    tsec_run=$((${tsec_check} - ${tsec_start}))'
            echo '    rt_h=$(( ${tsec_run}/3600 ))'
            echo '    rt_m=$(( (${tsec_run}/60) - (${rt_h}*60) ))'
            echo '    rt_s=$(( ${tsec_run} - (${tsec_run}/60)*60 ))'
            echo 
            echo '    sed -i "/check_time/d"                                     ${prefix}.${jids}'
            echo '    sed -i "/run_time/d"                                       ${prefix}.${jids}'
            echo '    sed -i "/no. structures/d"                                 ${prefix}.${jids}'
            echo '    echo "check_time:         ${t_check}"                   >> ${prefix}.${jids}'
            echo '    echo "run_time:           ${rt_h}:${rt_m}:${rt_s}"      >> ${prefix}.${jids}'
            echo '    echo "no. structures:     ${counter}"                   >> ${prefix}.${jids}'
            echo 'done'
            echo 
            echo 'sleep 5'
            echo 
            echo 'wait'
            echo 
            echo 'counter=$(find . ./hopper -maxdepth 1 -type f -name "*.res" | sed "/data.res/d" | wc -l)'
            echo '[[ ${counter} -eq 0 ]] && touch DONE_${jobid}'
            echo
        ) >> $jobscript
    elif [[ $program == "forge" ]]
    then
        (
            echo '# check the number of potential generated (./$seed/*.ddp files)'
            echo
            echo 'tsec_start=$(date +%s)'
            echo 
            echo 'counter=0'
            echo 'counterddp=0'
            echo "numpot='${numpot}'"
            echo
            echo 'until [[ $counter -ge $numpot || $counterddp -ge $numpot ]]'
            echo 'do'                
            echo '    counter=$(grep "testing:   testing" ${seed}/*.out | wc -l)'
            echo '    counterddp=$(ls ${seed}/*.ddp | wc -l)'
            echo
            echo '    t_check=$(date +%Y-%m-%d\ %H:%M:%S)'
            echo '    tsec_check=$(date +%s)'
            echo '    tsec_run=$((${tsec_check} - ${tsec_start}))'
            echo '    rt_h=$(( ${tsec_run}/3600 ))'
            echo '    rt_m=$(( (${tsec_run}/60) - (${rt_h}*60) ))'
            echo '    rt_s=$(( ${tsec_run} - (${tsec_run}/60)*60 ))'
            echo 
            echo '    sed -i "/check_time/d"                                     ${prefix}.${jids}'
            echo '    sed -i "/run_time/d"                                       ${prefix}.${jids}'
            echo '    sed -i "/no. potentials/d"                                 ${prefix}.${jids}' 
            echo '    echo "check_time:         ${t_check}"                   >> ${prefix}.${jids}'   
            echo '    echo "run_time:           ${rt_h}:${rt_m}:${rt_s}"      >> ${prefix}.${jids}'
            echo '    echo "no. potentials:     ${counterddp}"                >> ${prefix}.${jids}'
            echo 'done'
            echo
            echo 'touch DONE_${jobid}' >> $jobscript
        ) >> $jobscript
    elif [[ $program == "franks" ]] || [[ $program == "flock" ]]
    then
        echo 'touch DONE_${jobid}' >> $jobscript
    fi

    echo 'exit 0' >> $jobscript
}


## generate despwan file

function gendespawn {

    echo '    generate despawn-batch ...'

    # delete/cancel job

    (
        echo '#!/bin/bash'
        echo
        echo '# stop spawn-batch & delete/cancel job'
        echo
        echo "program='${program}'"
        echo "jobid=\$(cat .spawnpids.* | grep jobid: | head -n 1 | awk '{print \$2}')"
        echo
        echo 'touch DONE_${jobid}'
        echo
        [[ $sched == 'sge'   ]] && echo 'qdel ${jobid}'
        [[ $sched == 'slurm' ]] && echo 'scancel ${jobid}'
        echo
        echo 'counter=1'
        echo 'until [[ $counter -eq 0 ]]'
        echo 'do'
        echo '    sleep 1'
        [[ $sched == 'sge'   ]] && echo '    counter=$(qstat -u $USER -g d | grep $jobid | wc -l)'
        [[ $sched == 'slurm' ]] && echo '    counter=$(squeue --noheader --job=$jobid --array --user=$USER | wc -l)'
        echo 'done'
        echo
        echo 'echo "    job $jobid has been deleted/cancelled successfully"'
        echo
        echo 'rm -f ./.bashrc'
        echo
        echo
    ) > despawn-batch

    # update job information in .spawpids.* files

    (
        echo '# update job information in .spawnpids.* files'
        echo
        echo 't_end=$(date +%Y-%m-%d\ %H:%M:%S)'
        echo
        echo 'for spawnfile in .spawnpids.*'
        echo 'do'
        echo '    echo "end_time:           ${t_end}"                     >> $spawnfile'
        echo 'done'
        echo
    ) >> despawn-batch

    if [[ $program == 'airss' ]] || [[ $program == 'crud' ]]
    then
        (
            echo "seed='${seed}'"
            [[ $program == 'airss' ]] && echo 'counter=$(find . -maxdepth 1 -type f -name "$seed-*.res" 2> /dev/null | sed "/data.res/d" | xargs grep --no-filename TITL 2> /dev/null | wc -l)'
            [[ $program == 'crud'  ]] && echo 'counter=$(find . ./hopper -maxdepth 1 -type f -name "*.res" | sed "/data.res/d" | wc -l)'
            echo
            echo 'for spawnfile in .spawnpids.*'
            echo 'do'
            echo '    sed -i "/no. structures/d"                                $spawnfile'
            echo '    echo "no. structures:     ${counter}"                  >> $spawnfile'
            echo 'done'
            echo
            echo
        ) >> despawn-batch
    elif [[ $program == 'forge' ]]
    then
        (
            echo "seed='${seed}'"
            echo 'counter=$(ls ${seed}/*.ddp | wc -l)'
            echo
            echo 'for spawnfile in .spawnpids.*'
            echo 'do'
            echo '    sed -i "/no. potentials/d"                                $spawnfile'
            echo '    echo "no. potentials:     ${counter}"                  >> $spawnfile'
            echo 'done'
            echo
            echo
        ) >> despawn-batch
    fi

    echo 'mkdir -p jobinfo' >> despawn-batch
    echo "mv -f ${jobscript}                 jobinfo 2>/dev/null" >> despawn-batch
    echo 'mv -f .spawnpids* .fail.spawnpids* jobinfo 2>/dev/null' >> despawn-batch
    echo 'mv -f $program.{e,o,pe,po}*        jobinfo 2>/dev/null' >> despawn-batch
    echo 'mv -f slurm-*.out                  jobinfo 2>/dev/null' >> despawn-batch

    # backup data - job-related files

    if [[ $bakres != 'none' ]]
    then
        (
            echo '# backup data - job-related files'
            echo
            echo 't_end_ymd=$(date +%y%m%d)'
            echo 't_end_hms=$(date +%H%M%S)'
            echo
            echo 'backupdir=${t_end_ymd}-${t_end_hms}-${jobid}-${program}'
            echo 'mkdir ${backupdir}'
            echo
            echo 'mv jobinfo ${backupdir}'
            echo
            echo
        ) >> despawn-batch
    fi

    # backup data - input & output files

    if [[ $program == "airss" && $bakres != "none" ]]
    then
        (
            echo '# backup data -input & output files'
            echo
            echo 'rm -f $seed-*.{cell,param,res.temp,cell.temp} &'
            echo 'find . -maxdepth 1 -type f -name "$seed-*.res" -empty -delete &'
            echo 'find . -maxdepth 1 -type f -name "$seed-*.res" | xargs grep -s -L TITL | xargs rm -f &'
            echo 'find . -maxdepth 1 -type f -name "$seed-*.res" | xargs grep -s -L END  | xargs rm -f &'
            echo 'wait'
            echo
            echo 'find . -maxdepth 1 -type f -name "$seed-*.res" | shuf | head -n -'$max' | xargs -r rm'
            echo
            echo 'cp $seed.{cell,param}       ${backupdir} 2>/dev/null'
            echo 'cp -r $seed{,.eddp}         ${backupdir} 2>/dev/null'
            echo 'mv trash                    ${backupdir} 2>/dev/null'
            [[ $bakres == 'mv' ]] && echo 'find . -maxdepth 1 -type f -name "$seed-*.*" -exec mv -t ${backupdir} {} \+'
            [[ $bakres == 'cp' ]] && echo 'find . -maxdepth 1 -type f -name "$seed-*.*" -exec cp -t ${backupdir} {} \+'
            echo
        ) >> despawn-batch

    elif [[ $program == "crud" && $bakres != "none" ]]
    then
        (
            echo 'cp *.{cell,param}       ${backupdir} 2>/dev/null'
            [[ $bakres == 'mv' ]] && echo 'mv    bad_castep good_castep hopper ${backupdir} 2>/dev/null'
            [[ $bakres == 'cp' ]] && echo 'cp -R bad_castep good_castep hopper ${backupdir} 2>/dev/null'
            echo
        ) >> despawn-batch

    elif [[ $program == "forge" && $bakres != "none" ]]
    then
        (
            echo 'cp -R ${seed} data.res ${backupdir} 2>/dev/null'
            echo
        ) >> despawn-batch
    fi

    echo 'wait' >> despawn-batch
    echo 'exit 0' >> despawn-batch

    chmod 777 despawn-batch
}



## submit jobscript

function subjob {

    echo '    submit jobscript ...'

    [[ $sched == 'sge' ]] && jobid=$(qsub -terse ${jobscript} | awk 'BEGIN{FS="."}; {print $1}')
    [[ $sched == 'slurm' ]] && jobid=$(sbatch --parsable ${jobscript})

    [[ -z $jobid ]] && echo "    job submission failed" && touch ./STOP && exit 1

    (   
        echo "program:            $program"
        echo "command:            $cmdline"
        echo "jobid:              $jobid"
        echo "submit_time:        $(date +%Y-%m-%d\ %H:%M:%S)"
    ) > .spawnpids.$jobid
}

## monitor job

function monjob {

    echo "    monitor the job $jobid ..."

    # monitoring the submitted jobs

    counter=1
    success='false'
    repeat=12

    until [[ $repeat -eq 0 ]] || [[ $success == 'true' ]]
    do
        sleep 5

        # count the number of jobs

        [[ $sched == 'sge' ]] && counter=$(qstat -u $USER -g d | grep $jobid | wc -l)
        [[ $sched == 'slurm' ]] && counter=$(squeue --noheader --job=$jobid --array --user=$USER | wc -l)

        if [[ $counter -eq 0 ]]
        then
            repeat=$(( $repeat - 1 ))
        else
            repeat=12
        fi

        echo -e -n "\r    ${counter} jobs pending/running"

        # check if STOP file is created

        [[ -f './STOP' ]] && echo -e '\n    stopping spawn-batch ...' && ./despawn-batch && exit 0

        # check if the job has been completed

        [[ -f DONE_${jobid} ]] && success='true'
    done

    # check if jobs are pending/running

    if [[ $success == 'true' ]]
    then
        echo -e '\n    job has completed successfully'

        [[ $despawn == 'true' ]] && echo -e '    run despawn-batch ...' && ./despawn-batch

        sleep 1

    elif [[ $success == 'false' ]]
    then

        echo -e '\n    job is terminated by wall clock limit'
        
        # make sure that the job is terminated

        [[ $sched == 'sge' ]] && qdel $jobid
        [[ $shced == 'slurm' ]] && scancel $jobid

        rename '.spawnpids' '.fail.spawnpids' .spawnpids.*

        # clean up intermediate result files where calculations are not fully completed

        if [[ $program == 'airss' ]]
        then
            for f in $(ls $seed-*.cell)
            do
                seedairss=${f%%.cell}
                [[ ! -f $seedairss.res ]] && ls $seedairss.* | xargs rm -f
            done

        elif [[ $program == 'crud' ]]
        then
            # for failure due to bad castep
            if [[ -d bad_castep ]]
            then
                rm -f bad_castep/*.{cell,param,castep}
                find . ./bad_castep -maxdepth 1 -type f -name "*.res" | sed '/data.res/d' | xargs mv -t ./hopper
            fi
            # for the incomplete calculation stopped during running
            if ls *.castep &>/dev/null
            then
                for castepfile in `ls *.castep`
                do
                    seedcrud=${castepfile%%.castep}
                    echo $seedcrud
                    castep2res $seedcrud > hopper/$seedcrud.res
                    rm -f $seedcrud.{cell,param,castep,res}
                done
            fi
            # for the incomplete calculation stopped at the beginning of the calculation
            for f in $(ls $seed-*.cell)
            do
                seedcrud=${f%%.cell}
                if [[ -f $seedcrud.res ]]; then
                    mv $seedcrud.res ./hopper
                else
                    cabal cell res < $seedcrud.cell > ./hopper/$seedcrud.res
                fi
                rm -f $seedcrud.{cell,param,castep,res}
            done

        fi

        echo -e '    resubmit the job ...\n'
    fi
}


################################################################################

echo "    spawn-batch starting: $(date)"
echo

# generate jobscript

genjob && gendespawn

# submit jobscript

if [[ $genjob != 'true' ]]
then
    if [[ $program == 'airss' || $program == 'crud' || $program == 'forge' || $program == 'franks' || $program == 'flock' ]]
    then    
        until [[ $success == 'true' ]]
        do
            subjob
            monjob
        done
    else
        subjob
    fi
fi

echo
echo "    spawn-batch complete: $(date)"
echo
wait
exit 0
