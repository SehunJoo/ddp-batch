#!/bin/bash

set -e

function usage {
    echo "usage: $(basename $0) [-c] [-n ncycles] [-p pressure] [-l lowpress] [-R] [-r rcut] [-f full] [-m minima] [-b nbest] [-d deviation] [-j jiggles] [-J Jiggles] [-a amp] [-T temp] [-S step] [-t time] [-P npoly] [-L lowexp] [-H highexp] [-B nbody] [-N nnodes] [-E deltae] [-M mpinp] [-O ompnp] [-F minpot] [-e] [-s seed]" 2>&1
    echo '  iteratively generate a data derived potential'
    echo '   -c             clean up (deletes files)'
    echo '   -n ncycles     number of cycles'
    echo '   -p pressure    target pressure (high)'
    echo '   -l lowpress    target pressure (low)'
    echo '   -R prand       randomise pressure'
    echo '   -r rcut        cutoff for features'
    echo '   -f full        number of fully random structures'
    echo '   -m minima      number of local minima each cycle'
    echo '   -b nbest       best of nbest minima retained'    
    echo '   -d deviation   deviation bias'    
    echo '   -j jiggles     number of jiggles of local minima'
    echo '   -J Jiggles     number of jiggles of marker structures'
    echo '   -a amp         amplitude for jiggling'
    echo '   -T temp        temperature for thermalising'
    echo '   -S step        time step for thermalising (fs)'
    echo '   -t time        time for thermalising (ps)'
    echo '   -P npoly       number of polynomials'
    echo '   -L lowexp      lowest exponent'
    echo '   -H highexp     highest exponent'
    echo '   -B nbody       highest body order'
    echo '   -N nnodes      number of nodes in hidden layer'
    echo '   -E deltae      energy window'
    echo '   -M mpinp       number of remote MPI cores'
    echo '   -O ompnp       number of remote OMP cores'
    echo '   -F minpot      approximate floor for the number of potentials'
    echo '   -e email       send email to address when completed'
    echo '   -s seed        seedname'
    exit 1
}

# set defaults

clean='false'
ncycles=5
pressure=0.001 # Small positive pressure to disfavour expanded cells
lowpress=0.0
prand='false'
rcut=3.75
full=1000
minima=100
nbest=1
deviation=0.0
jiggles=10
Jiggles=100
amp=0.02
temp='none'
step=1
time=10
npoly=5
lowexp=2
highexp=10
nbody=3
nnodes=5
deltae=10.0
mpinp=4
ompnp=4
minpot=0
email='false'
seed='seed'

optstring=":cs:n:p:l:Rr:f:m:b:d:j:J:a:T:S:t:P:L:H:B:N:E:M:O:F:eh"

while getopts ${optstring} arg; do
    case ${arg} in
	c)
	    clean="true"
	    ;;
	n)
	    ncycles="${OPTARG}"
	    ;;
	p)
	    pressure="${OPTARG}"
	    ;;
	l)
	    lowpress="${OPTARG}"
	    ;;
	R)
	    prand="true"
	    ;;
	r)
	    rcut="${OPTARG}"
	    ;; 
	f)
	    full="${OPTARG}"
	    ;;
	m)
	    minima="${OPTARG}"
	    ;;
	b)
	    nbest="${OPTARG}"
	    ;;
	d)
	    deviation="${OPTARG}"
	    ;;
	j)
	    jiggles="${OPTARG}"
	    ;;
	J)
	    Jiggles="${OPTARG}"
	    ;;
	a)
	    amp="${OPTARG}"
	    ;;
 	T)
 	    temp="${OPTARG}"
 	    ;;
  	S)
  	    step="${OPTARG}"
  	    ;;
  	t)
  	    time="${OPTARG}"
  	    ;;
	P)
	    npoly="${OPTARG}"
	    ;;
  	L)
  	    lowexp="${OPTARG}"
  	    ;;
  	H)
  	    highexp="${OPTARG}"
  	    ;;
	B)
	    nbody="${OPTARG}"
	    ;;
	N)
	    nnodes="${OPTARG}"
	    ;;
	E)
	    deltae="${OPTARG}"
	    ;;
	M)
	    mpinp="${OPTARG}"
	    ;;
 	O)
 	    ompnp="${OPTARG}"
 	    ;;
	F)
	    minpot="${OPTARG}"
	    ;;
	s)
	    seed="${OPTARG}"
	    ;;
	e)
	    email="true"
	    ;;
	h)
	    usage
	    ;;       
	?)
        echo "invalid option: -${OPTARG}."
        echo
        usage
        ;;
    esac
done

# checks before proceeding

[[ ! -f $seed.param ]] && ( echo $seed'.param not found' ; exit 1 )

[[ ! -f $seed.cell ]] && ( echo $seed'.cell not found' ; exit 1 )

if ls .spawnpids* &>/dev/null; then
    echo 'spawn files detected - aborting ...'
    exit 1
fi

if ls .farmpids* &>/dev/null; then
    echo 'farm files detected - aborting ...'
    exit 1
fi

if [[ ${clean} == true ]];then
    echo 'cleaning up. files will be deleted, do you wish to proceed?'

    select yesno in "yes" "all" "no"; do
	    case $yesno in
          yes ) rm -fr flock-*.agr flock-*.delta $seed.cell.* $seed-*.* training validation testing good_castep hopper bad_castep list.franks sed* STOP jobscript_*.sh DONE_* ; ./despawn-batch 2> /dev/null ; ./defarm-batch 2 >/dev/null ;  rm -fr  despawn-batch defarm-batch; exit 0;;
          all ) rm -fr flock-*.agr flock-*.delta $seed.cell.* $seed-*.* training validation testing good_castep hopper bad_castep list.franks sed* STOP jobscript_*.sh DONE_* $seed $seed.eddp data.res; ./despawn-batch 2> /dev/null ; ./defarm-batch 2 >/dev/null ;  rm -fr  despawn-batch defarm-batch; exit 0;;
          no ) exit 1;;
	    esac
    done
    
fi

echo '                                                       '
echo '               $$\                 $$\                 '
echo '               $$ |                \__|                '
echo '      $$$$$$$\ $$$$$$$\   $$$$$$\  $$\ $$$$$$$\        '
echo '     $$  _____|$$  __$$\  \____$$\ $$ |$$  __$$\       '
echo '     $$ /      $$ |  $$ | $$$$$$$ |$$ |$$ |  $$ |      '
echo '     $$ |      $$ |  $$ |$$  __$$ |$$ |$$ |  $$ |      '
echo '     \$$$$$$$\ $$ |  $$ |\$$$$$$$ |$$ |$$ |  $$ |      '
echo '      \_______|\__|  \__| \_______|\__|\__|  \__|      '
echo '                                                       '
echo '    automated generation of data derived potentials    '
echo '                                                       '
echo '       author: Chris J. Pickard, Cambridge 2023        '
echo '                                                       '
echo '    summary of parameters - '
echo
echo "      ncycles:   "$ncycles
echo "      pressure:  "$pressure" GPa"
echo "      lowpress:  "$lowpress" GPa"
echo "      prand:     "$prand
echo "      rcut:      "$rcut" Ang"
echo "      full:      "$full
echo "      minima:    "$minima
echo "      nbest:     "$nbest
echo "      deviation: "$deviation
echo "      jiggles:   "$jiggles
echo "      Jiggles:   "$Jiggles
echo "      amp:       "$amp" Ang"
echo "      temp:      "$temp" K"
echo "      step:      "$step" fs"
echo "      time:      "$time" ps"
echo "      npoly:     "$npoly
echo "      lowexp:    "$lowexp
echo "      highexp:   "$highexp
echo "      nbody:     "$nbody
echo "      nnodes:    "$nnodes
echo "      deltae:    "$deltae
echo "      mpinp:     "$mpinp
echo "      ompnp:     "$ompnp
echo "      minpot:    "$minpot
echo "      email:     "$email
echo "      seed:      "$seed
echo

## generate data through full randomisation, and no relaxation

function fullrand {
    
    echo 'launching airss ...'
    
    spawn-batch  -command airss.pl -max $full -mpinp $mpinp -step 0 -seed $seed &
    
    counter=0
    
    until [[ $counter -ge $full ]]
    do
	    sleep 1
	    test -f "./STOP" && echo -e '\nstopping chain ..' && ./despawn-batch && exit 0
	    counter=`ls $seed-*.res 2> /dev/null | wc -l`
	    echo -n -e "\r\033[0K"$counter" structures"
    done
    
    echo
    echo 'stopping airss ...'
    
    ./despawn-batch
    
    sleep 5
    
    echo 'storing structures ...'
    
    find . -name "$seed-*.res" -empty -type f -delete
    grep -L TITL $seed-*.res | xargs rm -f
    grep -L END $seed-*.res | xargs rm -f
    
    ls $seed-*.res | shuf -n $full | xargs cat >> data.res
    
    rm $seed-*.*
    
}

## generate data by relaxation of marker structures using repose, and computing energy using castep

function markandjiggle {
    
    echo 'shaking marker structures ...'
    
    find ./marks -name "$seed-*.res" -empty -type f -delete
    
    grep -L TITL ./marks/$seed-*.res | xargs rm -f
    grep -L END ./marks/$seed-*.res | xargs rm -f
    
    ( cd ./marks && reshake $amp $amp 0 $Jiggles $seed 2> /dev/null )
    
    sleep 1
    
    mv ./marks/shook hopper
        
    echo 'launching crud ...'
    
    spawn-batch  -command crud.pl -mpinp $mpinp &
    
    sleep 1
    
    counter=1
    
    until [[ $counter -eq 0 ]]
    do
	    sleep 1
	    test -f "./STOP" && echo -e '\nstopping chain ..' && ./despawn-batch && exit 0
	    counter=`ls $seed-*.res ./hopper/$seed-*.res 2> /dev/null | wc -l`
	    echo -n -e "\r\033[0K"$counter" remaining"
    done
    
    sleep 1
    
    echo
    echo 'stopping crud ...'
    
    ./despawn-batch
    
    sleep 5
    
    echo 'storing structures ...'
    
    cat ./good_castep/$seed-*.res >> data.res
    
    rm -fr bad_castep good_castep hopper
    
}

## generate data by relaxation of random structures using repose, and computing energy using castep

function relaxandjiggle {

    echo 'launching airss ...'

    if [[ ${prand} == true ]]
    then
	    spawn-batch  -command airss.pl -max $minima -keep -mpinp $mpinp -press $pressure -pmin $lowpress -prand -repose -nbest $nbest -devmin $deviation -seed $seed &
    else
	    spawn-batch  -command airss.pl -max $minima -keep -mpinp $mpinp -press $pressure -repose -nbest $nbest -devmin $deviation -seed $seed &
    fi

    counter=0

    until [[ $counter -ge $minima ]]
    do
	    sleep 1
	    test -f "./STOP" && echo -e '\nstopping chain ..' && ./despawn-batch && exit 0
	    counter=`ls $seed-*.res 2> /dev/null | wc -l`
	    echo -n -e "\r\033[0K"$counter" structures"
    done

    echo
    echo 'stopping airss ...'
    
    ./despawn-batch
    
    sleep 5
    
    echo 'shaking structures ...'
    
    find . -name "$seed-*.res" -empty -type f -delete
    grep -L TITL $seed-*.res | xargs rm -f
    grep -L END $seed-*.res | xargs rm -f

    let minum=$minima
    
    ls $seed-*.res | shuf | head -n -$minum | xargs -r rm
    
    reshake $amp $amp 0 $jiggles $seed 2> /dev/null
    
    sleep 1
    
    mv shook hopper
    
    rm $seed-*.*
    
    if [[ ${temp} != 'none' ]]
    then
    
       echo 'thermalising structures ...'
    
       echo '-ts '$step' -dr 0.5 -qt '$time' 10 -tt '$temp > $seed.par
    
       echo 'launching crud ramble ...'
    
       spawn-batch  -command crud.pl -ramble -mpinp $mpinp &
    
       sleep 1
    
       counter=1
    
       until [[ $counter -eq 0 ]]
       do
          sleep 1
   	    test -f "./STOP" && echo -e '\nstopping chain ..' && ./despawn-batch && exit 0
   	    counter=`ls $seed-*.res ./hopper/$seed-*.res 2> /dev/null | wc -l`
   	    echo -n -e "\r\033[0K"$counter" remaining"
       done
    
       sleep 1
    
       echo
       echo 'stopping crud ramble ...'
    
       ./despawn-batch
    
       sleep 5
    
       echo 'moving structures ...'
    
       mv ./good_castep/$seed-*.res ./hopper
    
       test -d "./bad_castep" && mv ./bad_castep/$seed-*.res ./hopper ## WORK ON THIS - NEED THE STRUCTURE THAT FAILED
       
       rm -fr bad_castep good_castep
       
    fi
    
    echo 'launching crud ...'
    
    spawn-batch  -command crud.pl -mpinp $mpinp &
    
    sleep 1
    
    counter=1
    
    until [[ $counter -eq 0 ]]
    do
	    sleep 1
	    test -f "./STOP" && echo -e '\nstopping chain ..' && ./despawn-batch && exit 0
	    counter=`ls $seed-*.res ./hopper/$seed-*.res 2> /dev/null | wc -l`
	    echo -n -e "\r\033[0K"$counter" remaining"
    done
    
    sleep 1
    
    echo
    echo 'stopping crud ...'
    
    ./despawn-batch
    
    sleep 5
    
    echo 'storing structures ...'
    
    cat ./good_castep/$seed-*.res >> data.res
    
    rm -fr bad_castep good_castep hopper
    
}

## construct ensemble potentials

function genpot {
    
    echo 'cleaning up ...'

    rm -fr $seed $seed.eddp

    mkdir $seed

    if [[ ${prand} == true ]]
    then
	    meanpress=`echo "($pressure+$lowpress)/2" | bc -l`
    else
	    meanpress=$pressure
    fi

    echo 'constructing features ...'
    
    ntot=`cryan -p $meanpress -de $deltae -r < data.res 2> /dev/null | wc -l`
    
    let ntrain=$ntot*8/10
    let nvalid=($ntot-$ntrain)/2
    let ntest=$ntot-$ntrain-$nvalid

    echo 'data split: '$ntrain':'$nvalid':'$ntest
    
    franks $rcut $nbody $npoly $lowexp $highexp $ntrain $nvalid $ntest $deltae $meanpress 2> /dev/null
    
    echo 'launching forge ...'

    #let numjobs=`cat ~/.spawn | grep -v ^# | awk '{print $2}' | awk -v np="$ompnp" -F'=' '{sum+=int($2/np)} END {print sum}'`

    #let numpot=$minpot/$numjobs+1

    #let maxpot=$numjobs*$numpot
    
    if [[ $nnodes -gt 0 ]]
    then
	    farm-batch  -command forge -ompnp $ompnp -es 10 -n 200 -nn $nnodes -np -q -numpot $minpot -s ./$seed/$seed &
    else
	    farm-batch  -command forge -ompnp $ompnp -es 10 -n 200 -np -q -numpot $minpot -s ./$seed/$seed &
    fi
    
    counter=0

    #echo 'maximum '$maxpot' potentials'

    #let waitpot=$maxpot*95/100

    #echo 'waiting for at least '$waitpot' potentials'

    until [[ $counter -ge $minpot ]]
    do
	    sleep 10
	    test -f "./STOP" && echo -e '\nstopping chain ..' && ./defarm-batch && exit 0
       #counter=`grep "testing:   testing" $seed/*.out | wc -l`
    counter=`ls $seed/*.ddp 2> /dev/null | wc -l`
       echo -n -e "\r\033[0K"$counter" potentials"
    done

    sleep 10

    echo
    echo 'stopping forge ...'
    
    ./defarm-batch
    
    sleep 5

    find . -name "$seed/$seed*.ddp" -empty -type f -delete
    grep -L powers $seed/$seed*.ddp | xargs rm -f
    ls $seed/$seed*.ddp | shuf | head -n -$minpot | xargs -r rm
    let gotpot=`ls $seed/$seed*.ddp | wc -l`

    echo 'got '$gotpot' potentials'
    
    echo 'generate combination ...'
    echo

    let num_local_cores=(`getconf _NPROCESSORS_ONLN`+1)/2

    if [[ $num_local_cores -lt 1 ]]
    then
	    let num_local_cores=1
    fi
    
    ls $seed/$seed*.ddp | flock -ompnp $num_local_cores -p $meanpress -v -q > $seed.eddp
    dir=$(date +%y%m%d-%H%M%S)-flock
    mkdir $dir
    cp flock-* $dir
    cp -R $seed{,.cell,.param,.eddp} data.res $dir
    sleep 1

    echo 'removing training/validation/testing files ...'

    rm -f training validation testing
    
}

################################################################################

rm -f ./STOP

# get started with fully random structures

[[ $full -gt 0 ]] && fullrand || echo 'skipping full randomisation'

# jiggle marker structures 

nmarks=`ls -1 ./marks/$seed-*.res 2>/dev/null | wc -l`

[[ $nmarks -gt 0 && $Jiggles -gt 0 ]] && markandjiggle || echo 'no marks'

# stop if we have no training data

[[ ! -f ./data.res ]] && ( echo 'no training data found - stopping' ; exit 1 )

# generate an initial potential

genpot

# start cycles

let nbest_orig=$nbest

for ((i = 1 ; i <= $ncycles ; i++))
do
    test -f "./STOP" && echo -e '\nstopping chain ..' && exit 0
    relaxandjiggle
    genpot
    let nbest=$nbest*$nbest_orig
done

# report successful completion

[[ ${email} == true ]] && ( echo 'sending email to '`whoami` ; echo 'chain job complete: '$seed' '`date` | sendmail `whoami` )

echo 'chain job complete: '$seed' '`date`

exit 0
