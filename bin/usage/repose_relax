#!/bin/bash
#########################################################
# Script to perform a geometry optimistion using repose #
#########################################################

set -e

#########################
# Test usage is correct #
#########################

if [ $# -ne 3 ]; then
         echo 1>&2 "Usage: repose_relax <exe> <nomp> <seed>"
         exit 127
fi

###########################
# Set the input variables #
###########################

exe=$1
nomp=$2
seed=$3

maxit=100000
numit=0
step=2
root=${seed%%-*}
root=${root##*\/}

#############
# Functions #
#############

function run_repose()
{
    set +e
    $exe -q -mpinp $nomp -m $step `cat $seed.par 2> /dev/null` $seed > $seed.rout 2> $seed.err
    let numit=numit+step
    set -e

    # Trap a crashing of the code
    
    if grep -q FAILED "$seed.rout"; then
      exit 0 # Fail peacefully
    fi

    if [[ $(wc -c $seed.rout | awk '{print $1}') -eq 0 ]]; then

        # read_cell : failed to find str%ion_equiv
        # eval_ddp: close contact detected
        # eval_ddp: nna,nnb,nnc too big
        # repose: deviation too small
        # repose: deviation too large

        success=1
        echo $numit >> $seed.conv
        cat $seed.err >> $seed.conv

        if [[ $(grep 'read_cell : failed to find str%ion_equiv' $seed.err | wc -l) -gt 0 ]]; then
            exit 0 # Fail peacefully
        elif [[ $(grep 'repose: deviation too small' $seed.err | wc -l) -gt 0 ]]; then
            exit 0 # Fail peacefully
        elif [[ $(grep 'repose: deviation too large' $seed.err | wc -l) -gt 0 ]]; then
            exit 0 # Fail peacefully
        else
            return 0 # Fail peacefully, get the results of previous run
        fi
    fi
    
    # Construct a fake Castep output file
    
    echo " Welcome to a b c repose" > $seed.castep
    (printf " Run started: at " ; date) >> $seed.castep
    (printf " from code version ";airss_version)|sed 's/AIRSS Version//g' >> $seed.castep
    echo "                          Files used for pseudopotentials:" >> $seed.castep
    md5sum $root.{pp,ppp,ddp} 2>/dev/null | awk '{print $2,"("$1")"}' >> $seed.castep
    echo >> $seed.castep
    echo "                           -------------------------------" >> $seed.castep
    
    grep Pressure: $seed.rout | tail -1 | awk '{print " *  Pressure: "$2}' >> $seed.castep
    grep Enthalpy: $seed.rout | tail -1 | awk '{print " REP: Final Enthalpy     = "$2}' >> $seed.castep
    grep Volume:   $seed.rout | tail -1 | awk '{print "Current cell volume = "$2}' >> $seed.castep

    # Monitor the convergence

    enthalpy=$(grep "Enthalpy" $seed.rout | tail -1 | awk '{print $2}')
    volume=$(grep "Volume" $seed.rout | tail -1 | awk '{print $2}')
    minsep=$(cat $seed-out.cell | cabal cell res | cryan -g 2>/dev/null | grep MINSEP)
    printf "%-7s %16.8f %16.8f" $numit $enthalpy $volume >> $seed.conv
    printf "  $minsep" >> $seed.conv
    printf "\n" >> $seed.conv


    # Detrmine how the run finished

    if [[ $(grep 'Converged in' $seed.rout | wc -l) -gt 0 ]]; then
        let success=success-1
    elif [[ $(grep 'Did not converge after' $seed.rout | wc -l) -gt 0 ]]; then
        success=2
    else
        success=1
        echo $numit >> $seed.conv
        cat $seed.err >> $seed.conv
    fi

    if [[ $numit -ge $maxit ]]; then
        success=1
    fi

    return;
}

function new_cell()
{
    if [[ $success -gt 1 ]]; then
        cp $seed-out.cell $seed.cell
    fi

    return;
}

############
# Optimise #
############

success=2

for s in 2 3 5 10
do
    step=$s
    for ((  i = 1 ;  i <= 10;  i++  ))
    do
        run_repose
        new_cell
        [[ $success -eq 1 ]] && break 2
    done
done

step=100
while [[ $success -gt 1 ]]; do
    run_repose
    new_cell
done

# All is well - finish

grep "Pressure:" $seed.castep | tail -1 | awk 'BEGIN{FS="[*]|[:]"}{printf "%-20s%10.8f\n", "Pressure: ",$3}';
grep -E -e 'Final free|corrected final free|Final Enthalpy' $seed.castep | tail -1 | awk 'BEGIN {FS="="};{print $2}' | awk '{printf "%-20s%10.8f\n", "Enthalpy: ",$1}'

grep "Current cell volume =" $seed.castep | tail -1 | awk '{printf "%-20s%10.8f\n", "Volume: ",$5}';


exit 0
