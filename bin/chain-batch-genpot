#!/bin/bash

set -e

function usage {
    echo "usage: $(basename $0) [-c] [-D ndata] [-n ncycles] [-p pressure] [-l lowpress] [-R] [-r rcut] [-f full] [-m minima] [-b nbest] [-d deviation] [-w waitseconds] [-j jiggles] [-J Jiggles] [-a amp] [-T temp] [-S step] [-t time] [-P npoly] [-L lowexp] [-H highexp] [-B nbody] [-N nnodes] [-E deltae] [-C compress] [-M mpinp] [-O ompnp] [-F minpot] [-A] [-x natexp] [-k] [-e] [-s seed]" 2>&1
    echo '  iteratively generate a data derived potential'
    echo '   -c             clean up (deletes files)'
    echo '   -D ndata       truncate dataset'
    echo '   -n ncycles     number of cycles'
    echo '   -p pressure    target pressure (high)'
    echo '   -l lowpress    target pressure (low)'
    echo '   -R prand       randomise pressure'
    echo '   -r rcut        cutoff for features'
    echo '   -f full        number of fully random structures'
    echo '   -m minima      number of local minima each cycle'
    echo '   -b nbest       best of nbest minima retained'    
    echo '   -d deviation   deviation bias' 
	 echo '   -w waitseconds how long to wait for minima before reducing deviation bias'   
    echo '   -j jiggles     number of jiggles of local minima'
    echo '   -J Jiggles     number of jiggles of marker structures'
    echo '   -a amp         amplitude for jiggling'
    echo '   -T temp        temperature for thermalising'
    echo '   -S step        time step for thermalising (fs)'
    echo '   -t time        time for thermalising (ps)'
    echo '   -P npoly       number of polynomials'
    echo '   -L lowexp      lowest exponent'
    echo '   -H highexp     highest exponent'
    echo '   -B nbody       highest body order'
    echo '   -N nnodes      number of nodes in hidden layer'
    echo '   -E deltae      energy window'
    echo '   -C compress    compress input by factor [1]'
    echo '   -M mpinp       number of remote MPI cores'
    echo '   -O ompnp       number of remote OMP cores'
    echo '   -F minpot      approximate floor for the number of potentials'
    echo '   -A             mean features - no active learning'
    echo '   -x             energy normalisation natom exponent (default 0.5)'
    echo '   -k             keep intermediate files'
    echo '   -e             send email to address when completed'
    echo '   -s seed        seedname'
    exit 1
}

# set defaults

clean='false'
ndata=0
ncycles=5
pressure=0.001 # Small positive pressure to disfavour expanded cells
lowpress=0.0
prand='false'
rcut=3.75
full=1000
minima=100
nbest=1
deviation=0.0
waitseconds=600
jiggles=10
Jiggles=100
amp=0.02
temp='none'
step=1
time=10
npoly=5
lowexp=2
highexp=10
nbody=3
nnodes=5
deltae=10.0
compress=1.0
mpinp=4
ompnp=4
minpot=0
average='false'
natexp=0.5
keep='false'
email='false'
seed='seed'

if [[ -f data.res ]]; then # If data exists, but default no active learning
   full=0
   ncycles=0
fi

optstring=":cs:D:n:p:l:Rr:f:m:b:d:w:j:J:a:T:S:t:P:L:H:B:N:E:C:M:O:F:Ax:keh"

while getopts ${optstring} arg; do
    case ${arg} in
	c)
	    clean="true"
	    ;;
	D)
	    ndata="${OPTARG}"
	    ;;
	n)
	    ncycles="${OPTARG}"
	    ;;
	p)
	    pressure="${OPTARG}"
	    ;;
	l)
	    lowpress="${OPTARG}"
	    ;;
	R)
	    prand="true"
	    ;;
	r)
	    rcut="${OPTARG}"
	    ;; 
	f)
	    full="${OPTARG}"
	    ;;
	m)
	    minima="${OPTARG}"
	    ;;
	b)
	    nbest="${OPTARG}"
	    ;;
	d)
	    deviation="${OPTARG}"
	    ;;
	w)
	    waitseconds="${OPTARG}"
	    ;;
	j)
	    jiggles="${OPTARG}"
	    ;;
	J)
	    Jiggles="${OPTARG}"
	    ;;
	a)
	    amp="${OPTARG}"
	    ;;
 	T)
 	    temp="${OPTARG}"
 	    ;;
  	S)
  	    step="${OPTARG}"
  	    ;;
  	t)
  	    time="${OPTARG}"
  	    ;;
	P)
	    npoly="${OPTARG}"
	    ;;
  	L)
  	    lowexp="${OPTARG}"
  	    ;;
  	H)
  	    highexp="${OPTARG}"
  	    ;;
	B)
	    nbody="${OPTARG}"
	    ;;
	N)
	    nnodes="${OPTARG}"
	    ;;
	E)
	    deltae="${OPTARG}"
	    ;;
	C)
	    compress="${OPTARG}"
	    ;;
	M)
	    mpinp="${OPTARG}"
	    ;;
 	O)
 	    ompnp="${OPTARG}"
 	    ;;
	F)
	    minpot="${OPTARG}"
	    ;;
	s)
	    seed="${OPTARG}"
	    ;;
  	A)
  	    average="true"
  	    ;;
  	x)
  	    natexp="${OPTARG}"
  	    ;;
 	k)
 	    keep="true"
 	    ;;
	e)
	    email="true"
	    ;;
	h)
	    usage
	    ;;       
	?)
        echo "invalid option: -${OPTARG}."
        echo
        usage
        ;;
    esac
done

# checks before proceeding

[[ ! -f $seed.param ]] && ( echo $seed'.param not found' ; exit 1 )

[[ ! -f $seed.cell ]] && ( echo $seed'.cell not found' ; exit 1 )

if ls .spawnpids* &>/dev/null; then
    echo '    spawn files detected - aborting ...'
    exit 1
fi

if ls .farmpids* &>/dev/null; then
    echo '    farm files detected - aborting ...'
    exit 1
fi

if [[ ${clean} == true ]];then
    echo '    cleaning up. files will be deleted, do you wish to proceed?'

    select yesno in "yes" "all" "no"; do
	    case $yesno in
          yes ) rm -fr flock-*.agr flock-*.delta $seed.cell.* $seed-*.* training validation testing good_castep hopper bad_castep list.franks sed* STOP jobscript_*.sh DONE_* ; ./despawn-batch 2> /dev/null ; ./defarm-batch 2 >/dev/null ;  rm -fr  despawn-batch defarm-batch; exit 0;;
          all ) rm -fr flock-*.agr flock-*.delta $seed.cell.* $seed-*.* training validation testing good_castep hopper bad_castep list.franks sed* STOP jobscript_*.sh DONE_* $seed $seed.eddp data.res; ./despawn-batch 2> /dev/null ; ./defarm-batch 2 >/dev/null ;  rm -fr  despawn-batch defarm-batch; exit 0;;
          no ) exit 1;;
	    esac
    done
    
fi

## output banner and summarise parameters

function banner {

	echo '                                                       '
	echo '               $$\                 $$\                 '
	echo '               $$ |                \__|                '
	echo '      $$$$$$$\ $$$$$$$\   $$$$$$\  $$\ $$$$$$$\        '
	echo '     $$  _____|$$  __$$\  \____$$\ $$ |$$  __$$\       '
	echo '     $$ /      $$ |  $$ | $$$$$$$ |$$ |$$ |  $$ |      '
	echo '     $$ |      $$ |  $$ |$$  __$$ |$$ |$$ |  $$ |      '
	echo '     \$$$$$$$\ $$ |  $$ |\$$$$$$$ |$$ |$$ |  $$ |      '
	echo '      \_______|\__|  \__| \_______|\__|\__|  \__|      '
	echo '                                                       '
	echo '    automated generation of data derived potentials    '
	echo '                                                       '
	echo '       author: Chris J. Pickard, Cambridge 2023        '
	echo '                                                       '
	echo '    summary of parameters - '
	echo
	echo "      ndata:       "$ndata
	echo "      ncycles:     "$ncycles
	echo "      pressure:    "$pressure" GPa"
	echo "      lowpress:    "$lowpress" GPa"
	echo "      prand:       "$prand
	echo "      rcut:        "$rcut" Ang"
	echo "      full:        "$full
	echo "      minima:      "$minima
	echo "      nbest:       "$nbest
	echo "      deviation:   "$deviation
	echo "      waitseconds: "$waitseconds
	echo "      jiggles:     "$jiggles
	echo "      Jiggles:     "$Jiggles
	echo "      amp:         "$amp" Ang"
	echo "      temp:        "$temp" K"
	echo "      step:        "$step" fs"
	echo "      time:        "$time" ps"
	echo "      npoly:       "$npoly
	echo "      lowexp:      "$lowexp
	echo "      highexp:     "$highexp
	echo "      nbody:       "$nbody
	echo "      nnodes:      "$nnodes
	echo "      deltae:      "$deltae
	echo "      compress:    "$compress
	echo "      mpinp:       "$mpinp
	echo "      ompnp:       "$ompnp
	echo "      minpot:      "$minpot
	echo "      average:     "$average
	echo "      natexp:      "$natexp
	echo "      keep:        "$keep
	echo "      email:       "$email
	echo "      seed:        "$seed
	echo
	echo "      job starting: "$seed" "`date`
	echo

}

## construct ensemble potentials

function genpot {
    
    echo '    cleaning up ...'

    rm -fr $seed $seed.eddp

    mkdir $seed

    if [[ ${prand} == true ]]
    then
	    meanpress=`echo "($pressure+$lowpress)/2" | bc -l`
    else
	    meanpress=$pressure
    fi

    echo '    constructing features ...'
    
    let ntot=`cryan -p $meanpress -de $deltae -r < data.res 2> /dev/null | wc -l`
		
	[[ $ntot -gt $ndata && $ndata -ne 0 ]] && ntot=$ndata
			
    let ntrain=$ntot*8/10
    let nvalid=($ntot-$ntrain)/2
    let ntest=$ntot-$ntrain-$nvalid

    echo '    data split: '$ntrain':'$nvalid':'$ntest
    
    if [[ ${average} == true ]]
    then
       [[ $ncycles -gt 0 ]] && (echo '    ncycles>0 not compatible with mean features' ; exit)
       frankm $rcut $nbody $npoly $lowexp $highexp $ntrain $nvalid $ntest $deltae $meanpress 2> /dev/null
    else
       franks $rcut $nbody $npoly $lowexp $highexp $ntrain $nvalid $ntest $deltae $meanpress 2> /dev/null
    fi
    
    echo '    launching forge ...'

    #let numjobs=`cat ~/.spawn | grep -v ^# | awk '{print $2}' | awk -v np="$ompnp" -F'=' '{sum+=int($2/np)} END {print sum}'`

    #let numpot=$minpot/$numjobs+1

    #let maxpot=$numjobs*$numpot
        
    [[ $nnodes -ne 0 ]] && nodeflag="-nn ${nnodes//,/ }" || nodeflag=''
 
    farm-batch  -command forge -en $natexp -c $compress -ompnp $ompnp -es 100 -n 1000 $nodeflag -np -q -numpot $minpot -s ./$seed/$seed &
    
    counter=0

    #echo '    maximum '$maxpot' potentials'

    #let waitpot=$maxpot*95/100 || waitpot=1

    #echo '    waiting for at least '$waitpot' potentials'

    until [[ $counter -ge $minpot ]]
    do
	    sleep 10
	    test -f "./STOP" && echo -e '\n    stopping chain ..' && ./defarm-batch && exit 0
       #counter=`grep "testing:   testing" $seed/*.out | wc -l`
    counter=`ls $seed/*.ddp 2> /dev/null | wc -l`
       echo -n -e "\r\033[0K    "$counter" potentials"
    done

    sleep 10

    echo
    echo '    stopping forge ...'
    
    ./defarm-batch
    
    sleep 5

    find . -name "$seed/$seed*.ddp" -empty -type f -delete
    grep -L powers $seed/$seed*.ddp | xargs rm -f
    ls $seed/$seed*.ddp | shuf | head -n -$minpot | xargs -r rm
    let gotpot=`ls $seed/$seed*.ddp | wc -l`

    echo '    got '$gotpot' potentials'
    
    echo '    generate combination ...'
    echo

    let num_local_cores=(`getconf _NPROCESSORS_ONLN`+1)/2

    if [[ $num_local_cores -lt 1 ]]
    then
	    let num_local_cores=1
    fi
    
    ls $seed/$seed*.ddp | flock -ompnp $num_local_cores -p $meanpress -v -q > $seed.eddp 2> flock.out
    dir=$(date +%y%m%d-%H%M%S)-flock
    mkdir $dir
    cp flock-* $dir
    cp -R $seed{,.cell,.param,.eddp} data.res $dir
    sleep 1
	
    mkdir -p plots
    
    mv flock-*.* plots
    dir=$(date +%y%m%d-%H%M%S)-flock
    mkdir $dir
    cp flock-* $dir
    cp -R $seed{,.cell,.param,.eddp} data.res $dir
    sleep 1
   
	cat flock.out
    dir=$(date +%y%m%d-%H%M%S)-flock
    mkdir $dir
    cp flock-* $dir
    cp -R $seed{,.cell,.param,.eddp} data.res $dir
    sleep 1

	wait
 
   if [[ ${keep} == true ]]; then
      echo '    keeping training/validation/testing files ...'
   else
      echo '    removing training/validation/testing files ...'
      rm -f training validation testing
   fi
    
}

################################################################################

banner

echo "      called as "${0##*/}" "${@}
echo

rm -f ./STOP

# generate an initial potential

genpot

# report successful completion

[[ ${email} == true ]] && ( echo '    sending email to '`whoami` ; (printf 'Subject: chain completed\n'; echo 'chain job complete: '$seed' '`date`; cat flock.out ) | /usr/sbin/sendmail `whoami` )

echo
echo '    chain job complete: '$seed' '`date`

exit 0
